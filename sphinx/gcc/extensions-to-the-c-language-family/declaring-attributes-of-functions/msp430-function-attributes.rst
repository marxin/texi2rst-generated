..
  Copyright 1988-2021 Free Software Foundation, Inc.
  This is part of the GCC manual.
  For copying conditions, see the GPL license file

.. _msp430-function-attributes:

MSP430 Function Attributes
^^^^^^^^^^^^^^^^^^^^^^^^^^

These function attributes are supported by the MSP430 back end:

.. gcc-attr:: critical

  .. index:: critical function attribute, MSP430

  Critical functions disable interrupts upon entry and restore the
  previous interrupt state upon exit.  Critical functions cannot also
  have the :gcc-attr:`naked`, :gcc-attr:`reentrant` or :gcc-attr:`interrupt` attributes.

  The MSP430 hardware ensures that interrupts are disabled on entry to
  :gcc-attr:`interrupt` functions, and restores the previous interrupt state
  on exit. The :gcc-attr:`critical` attribute is therefore redundant on
  :gcc-attr:`interrupt` functions.

.. gcc-attr:: interrupt

  .. index:: interrupt function attribute, MSP430

  Use this attribute to indicate
  that the specified function is an interrupt handler.  The compiler generates
  function entry and exit sequences suitable for use in an interrupt handler
  when this attribute is present.

  You can provide an argument to the interrupt
  attribute which specifies a name or number.  If the argument is a
  number it indicates the slot in the interrupt vector table (0 - 31) to
  which this handler should be assigned.  If the argument is a name it
  is treated as a symbolic name for the vector slot.  These names should
  match up with appropriate entries in the linker script.  By default
  the names ``watchdog`` for vector 26, ``nmi`` for vector 30 and
  :gcc-attr:`reset` for vector 31 are recognized.

.. gcc-attr:: naked

  .. index:: naked function attribute, MSP430

  This attribute allows the compiler to construct the
  requisite function declaration, while allowing the body of the
  function to be assembly code. The specified function will not have
  prologue/epilogue sequences generated by the compiler. Only basic
  ``asm`` statements can safely be included in naked functions
  (see :ref:`basic-asm`). While using extended ``asm`` or a mixture of
  basic ``asm`` and C code may appear to work, they cannot be
  depended upon to work reliably and are not supported.

.. gcc-attr:: reentrant

  .. index:: reentrant function attribute, MSP430

  Reentrant functions disable interrupts upon entry and enable them
  upon exit.  Reentrant functions cannot also have the :gcc-attr:`naked`
  or :gcc-attr:`critical` attributes.  They can have the :gcc-attr:`interrupt`
  attribute.

.. gcc-attr:: wakeup

  .. index:: wakeup function attribute, MSP430

  This attribute only applies to interrupt functions.  It is silently
  ignored if applied to a non-interrupt function.  A wakeup interrupt
  function will rouse the processor from any low-power state that it
  might be in when the function exits.

.. gcc-attr:: lower

  .. index:: lower function attribute, MSP430

  .. index:: upper function attribute, MSP430

  .. index:: either function attribute, MSP430

  On the MSP430 target these attributes can be used to specify whether
  the function or variable should be placed into low memory, high
  memory, or the placement should be left to the linker to decide.  The
  attributes are only significant if compiling for the MSP430X
  architecture in the large memory model.

  The attributes work in conjunction with a linker script that has been
  augmented to specify where to place sections with a ``.lower`` and
  a ``.upper`` prefix.  So, for example, as well as placing the
  ``.data`` section, the script also specifies the placement of a
  ``.lower.data`` and a ``.upper.data`` section.  The intention
  is that :gcc-attr:`lower` sections are placed into a small but easier to
  access memory region and the upper sections are placed into a larger, but
  slower to access, region.

  The ``either`` attribute is special.  It tells the linker to place
  the object into the corresponding :gcc-attr:`lower` section if there is
  room for it.  If there is insufficient room then the object is placed
  into the corresponding :gcc-attr:`upper` section instead.  Note that the
  placement algorithm is not very sophisticated.  It does not attempt to
  find an optimal packing of the :gcc-attr:`lower` sections.  It just makes
  one pass over the objects and does the best that it can.  Using the
  :option:`-ffunction-sections` and :option:`-fdata-sections` command-line
  options can help the packing, however, since they produce smaller,
  easier to pack regions.

